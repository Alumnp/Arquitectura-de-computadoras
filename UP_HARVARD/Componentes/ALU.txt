----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    13:16:21 10/28/2019 
-- Design Name: 
-- Module Name:    ALU2 - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity ALU is
 PORT(
         A : IN  std_logic_vector(7 downto 0);
         Data : IN  std_logic_vector(7 downto 0);
         OpCode : IN  std_logic_vector(3 downto 0);
         S : OUT  std_logic_vector(7 downto 0);
			F : OUT  std_logic;
         Z : OUT  std_logic;
         N : OUT  std_logic
        );
end ALU;

architecture Behavioral of ALU is

signal n1: STD_LOGIC_VECTOR(8 downto 0);
signal n2: STD_LOGIC_VECTOR(2 downto 0);

begin

process (A, Data, OpCode, n1, n2) begin
	
	--Funcion AND
	if (OpCode="0000" or OpCode="0001") then
		n1 <= '0'&(A and Data);
		
	--Funcion OR
	elsif (OpCode="0010" or OpCode="0011") then
		n1 <= '0'&(A or Data);
		
	--Funcion XOR
	elsif (OpCode="0100" or OpCode="0101") then
		n1 <= '0'&(A xor Data);
		
	--Funcion ADD
	elsif (OpCode="0110" or OpCode="0111") then
		n1 <= std_logic_vector('0' & UNSIGNED(A) + UNSIGNED(Data));
		
	--Funcion SUB
	elsif (OpCode="1000" or OpCode="1001") then
		n1 <= std_logic_vector('0' & UNSIGNED(A) - UNSIGNED(Data));
		
	--Funcion NOT
	elsif (OpCode="1010" and Data(7 downto 5)="000") then
		n1 <= '0'&(not A);
		
	--Funcion SLL
	elsif (OpCode="1010" and Data(7 downto 5)="001") then
		n1<= std_logic_vector('0'&(unsigned(A) sll to_integer(unsigned (Data (4 downto 0) ))));--Este metodo de conversion es del compaÃ±ero Odiseo
		
	--Funcion SRL
	elsif (OpCode="1010" and Data(7 downto 5)="010") then
		n1<= std_logic_vector('0'&(unsigned(A) srl to_integer(unsigned (Data (4 downto 0) ))));
		
	--Funcion ROL
	elsif (OpCode="1010" and Data(7 downto 5)="011") then
		n1<= std_logic_vector('0'&(unsigned(A) rol to_integer(unsigned (Data (4 downto 0) ))));
		
	--Funcion ROR
	elsif (OpCode="1010" and Data(7 downto 5)="100") then
		n1<= std_logic_vector('0'&(unsigned(A) ror to_integer(unsigned (Data (4 downto 0) ))));
		
	--Funcion NEG
	elsif (OpCode="1010" and Data(7 downto 5)="101") then
		n1 <= std_logic_vector('0'&("00000000"-UNSIGNED(A))); 
		
	--Funcion CLR
	elsif (OpCode="1010" and Data(7 downto 5)="110") then
		n1 <= "000000000";
		
	--Funcion NOP
	elsif (OpCode="1010" and Data(7 downto 5)="111") then
		n1 <= '0'&A;
		
	--Funcion RTI
	elsif (OpCode="1011" and Data(7 downto 6)="10") then
		n1 <= '0'&Data;
		
	--Funcion LDA
	elsif (OpCode="1100") then
		n1 <= '0'&data;
		
	--Funcion STA
	elsif (OpCode="1101") then
		n1 <= '0'&A;
	else
		n1 <= '0'&data;
	end if;
---Asignacion del auxiliar n2 para los casos de las banderas F, Z y N
	if (OpCode = "1010" and Data(7 downto 5)="110") then
		n2(2) <= Data(4);
	elsif (OpCode = "1010" and Data(7 downto 5)="111") then
		n2(2) <= '0';
	else
		n2(2) <= '1';
	end if;
	if(n1="000000000") then
		n2(1) <= '1';
	else
		n2(1) <= '0';
	end if;
	
	n2(0) <= n1(7);
	
end process;
--Asignacion de las banderas, mediante los auxiliares
	S <= n1(7 downto 0);
	F <= n2(2);
	Z <= n2(1);
	N <= n2(0);

end Behavioral;



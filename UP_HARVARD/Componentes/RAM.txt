----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    16:48:26 09/11/2017 
-- Design Name: 
-- Module Name:    RAM - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_TEXTIO.ALL;
use STD.TEXTIO.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity RAM is
    Port ( clk : in  STD_LOGIC;
           Addr : in  STD_LOGIC_VECTOR (7 downto 0);
           we : in  STD_LOGIC;
           DataIn : in  STD_LOGIC_VECTOR (7 downto 0);
           DataOut : out  STD_LOGIC_VECTOR (7 downto 0));
end RAM;

architecture Behavioral of RAM is
	type ram_type is array (0 to 2**(8)-1) of STD_LOGIC_VECTOR (7 downto 0);
	impure function makeRAM (DATOS : in string) return ram_type is                                                   
		FILE Data : text is in "DATA.MIF";                       
		variable L : line;                                 
		variable DRAM : ram_type;
	begin
		for I in ram_type'range loop
			readline (Data, L);
			read (L, DRAM(I));
		end loop;
	return DRAM;
	end function;
	
	signal dataRAM : ram_type := makeRAM("DATA.MIF");
	signal sel : STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
	
begin

	process(clk)
	begin
		if rising_edge(clk) then
			if we = '1' then
				dataRAM(to_integer(unsigned(Addr))) <= DataIn;
			end if;
		sel <= Addr;
		end if;
	end process;
	
	DataOut <= dataRAM(to_integer(unsigned(sel)));

end Behavioral;

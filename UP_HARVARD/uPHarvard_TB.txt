--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   13:37:44 09/23/2017
-- Design Name:   
-- Module Name:   D:/Xilinx/uPHarvard/uPHarvard_TB.vhd
-- Project Name:  uPHarvard
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: uPHarvard
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY uPHarvard_TB IS
END uPHarvard_TB;
 
ARCHITECTURE behavior OF uPHarvard_TB IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT uPHarvard
    PORT(
         clk : IN  std_logic;
         reset : IN  std_logic;
			irq : IN  std_logic;
         output : OUT  std_logic_vector(7 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal reset : std_logic := '0';
	signal irq : std_logic := '0';

 	--Outputs
   signal output : std_logic_vector(7 downto 0);

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: uPHarvard PORT MAP (
          clk => clk,
          reset => reset,
			 irq => irq,
          output => output
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
		reset <= '1';
      wait for 100 ns;
		
		reset <= '0';
		assert  output = "00000000" report "Error en output";
		
		wait for 30 ns;
		
		assert  output = "01011100" report "Error en output";
		
		wait for 30 ns;
		
		assert  output = "00011000" report "Error en output";
		
		wait for 30 ns;
		
		assert  output = "00010111" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "11101000" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "00111010" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "11000110" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "00000000" report "Error en output";
		
		wait for 30 ns;
		
		assert  output = "00000000" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "00000001" report "Error en output";
		
		wait for 30 ns;
		
		assert  output = "00000001" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 30 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "01101111" report "Error en output";
		
		wait for 60 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 40 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 30 ns;
		
		assert  output = "00000000" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "01010101" report "Error en output";
		
		wait for 20 ns;
		
		assert  output = "00000000" report "Error en output";
		
		wait for 165 ns;
		
		irq <= '1';
		
		wait for 25 ns;
		
		irq <= '0';
		
		wait for 80 ns;
		
		assert  output = "00110011" report "Error en output";
		
		wait for 40 ns;
		
		assert  output = "00000000" report "Error en output";

      wait for clk_period*10;

      -- insert stimulus here 

      wait;
   end process;

END;